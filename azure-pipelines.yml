trigger:
- feature-ms-christhianRossel-mensaje

pool:
  vmImage: ubuntu-latest

steps:
- script: |
      git fetch --unshallow
  displayName: 'git-fetch'

- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build jacocoTestReport'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false
  displayName: 'Build'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
    pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
    reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test'
    failIfCoverageEmpty: true
  displayName: "JaCoCo CoverageResults"

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $reportFile = Get-ChildItem -Path $(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml
      $content = Get-Content -Path $reportFile
      $xmlDoc = New-Object -TypeName System.Xml.XmlDocument
      $xmlDoc.LoadXml($content)
      $coverageNode = $xmlDoc.SelectNodes("/report/counter[@type='INSTRUCTION']")[0]
      $covered = [double]$coverageNode.GetAttribute("covered")
      $missed = [double]$coverageNode.GetAttribute("missed")
      $coveragePercentage = $covered / ($covered + $missed) * 100
      if ($coveragePercentage -lt 70) {
        $coverageResult = $coveragePercentage.ToString("F2")
        Write-Host "El porcentaje de cobertura de c贸digo es $coverageResult%"
        Write-Host "La cobertura de c贸digo es inferior al 85% aceptado. Se detiene el pipeline."
        exit 1
      } else {
        $coverageResult = $coveragePercentage.ToString("F2")
        Write-Host "El porcentaje de cobertura de c贸digo es $coverageResult%"
        Write-Host "La cobertura de c贸digo es superior al 85%. Se sigue flujo de pipeline."
      }
  displayName: "Verificar resultados Jacoco"

#- task: SonarCloudPrepare@1
#  inputs:
#    SonarCloud: 'Sonar-azure-DevOps-v4'
#    organization: 'christhian45'
#    projectKey: 'Christhian45_microservicio-spring'
#    projectName: 'microservicio-spring'
#  displayName: 'SonarCloud'
#
#- task: Gradle@3
#  inputs:
#    gradleWrapperFile: 'gradlew'
#    tasks: 'sonar'
#    publishJUnitResults: false
#    testResultsFiles: '**/TEST-*.xml'
#    javaHomeOption: 'JDKVersion'
#    sonarQubeRunAnalysis: true
#    sqGradlePluginVersionChoice: 'specify'
#    sonarQubeGradlePluginVersion: '3.3'
#    spotBugsAnalysis: false


- script: |
      docker run --rm \
        -v $(Build.SourcesDirectory):/work \
        -w /work \
        vmarrazzo/jmeter \
         -n -t $(Build.SourcesDirectory)/microservicio-spring.jmx -l $(Build.SourcesDirectory)/test-results.jtl
  displayName: 'Run JMeter Test'



#- task: Docker@2
#  inputs:
#    containerRegistry: 'microservicio-spring'
#    command: 'login'
#  displayName: "Login Docker"

#- task: Docker@2
#  inputs:
#    containerRegistry: 'microservicio-spring'
#    repository: 'chirsthian45/microservicio-spring'
#    command: 'build'
#    Dockerfile: '**/Dockerfile'
#  displayName: "Build Docker"

#- task: Docker@2
#  inputs:
#    containerRegistry: 'microservicio-spring'
#    repository: 'chirsthian45/microservicio-spring'
#    command: 'push'