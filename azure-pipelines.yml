trigger:
- feature-ms-christhianRossel-mensaje

pool:
  vmImage: ubuntu-latest

steps:
- script: |
      git fetch --unshallow
  displayName: 'git-fetch'

- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build jacocoTestReport'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false
  displayName: 'Build'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
    pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
    reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test'
    failIfCoverageEmpty: true
  displayName: "JaCoCo CoverageResults"

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $reportFile = Get-ChildItem -Path ./build/reports/jacoco/test/jacocoTestReport.xml
      $content = Get-Content -Path $reportFile
      if ($content -match 'BUILD FAILED') {
        Write-Host "La cobertura de c√≥digo no es suficiente. Se detiene el pipeline."
        exit 1
      }
  displayName: "Verificar resultados Jacoco"

#- task: SonarCloudPrepare@1
#  inputs:
#    SonarCloud: 'Sonar-azure-DevOps-v4'
#    organization: 'christhian45'
#    projectKey: 'Christhian45_microservicio-spring'
#    projectName: 'microservicio-spring'
#  displayName: 'SonarCloud'
#
#- task: Gradle@3
#  inputs:
#    gradleWrapperFile: 'gradlew'
#    tasks: 'sonar'
#    publishJUnitResults: false
#    testResultsFiles: '**/TEST-*.xml'
#    javaHomeOption: 'JDKVersion'
#    sonarQubeRunAnalysis: true
#    sqGradlePluginVersionChoice: 'specify'
#    sonarQubeGradlePluginVersion: '3.3'
#    spotBugsAnalysis: false

- task: Docker@2
  inputs:
    containerRegistry: 'microservicio-spring'
    command: 'login'
  displayName: "Login Docker"

- task: Docker@2
  inputs:
    containerRegistry: 'microservicio-spring'
    repository: 'chirsthian45/microservicio-spring'
    command: 'build'
    Dockerfile: '**/Dockerfile'
  displayName: "Build Docker"

- task: Docker@2
  inputs:
    containerRegistry: 'microservicio-spring'
    repository: 'chirsthian45/microservicio-spring'
    command: 'push'